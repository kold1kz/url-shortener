package config

import (
	"flag"
	"os"
	"testing"
)

func setEnvVars(vars map[string]string) func() {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
	original := make(map[string]string)
	for key := range vars {
		original[key] = os.Getenv(key)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
	for key, value := range vars {
		os.Setenv(key, value)
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
	return func() {
		for key, value := range original {
			if value == "" {
				os.Unsetenv(key)
			} else {
				os.Setenv(key, value)
			}
		}
	}
}

// üîß –°–ë–†–ê–°–´–í–ê–ï–ú –§–õ–ê–ì–ò –ú–ï–ñ–î–£ –¢–ï–°–¢–ê–ú–ò
func resetFlags() {
	flag.CommandLine = flag.NewFlagSet("test", flag.ContinueOnError)
}

func TestConfig_EnvironmentVariables(t *testing.T) {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	cleanup := setEnvVars(map[string]string{
		"SERVER_ADDRESS": "env-host:9090",
		"BASE_URL":       "https://env-shortener.com",
	})
	defer cleanup()

	resetFlags()

	cfg := Init()

	if cfg.ServerAddress != "env-host:9090" {
		t.Errorf("Expected ServerAddress 'env-host:9090', got '%s'", cfg.ServerAddress)
	}

	if cfg.BaseURL != "https://env-shortener.com" {
		t.Errorf("Expected BaseURL 'https://env-shortener.com', got '%s'", cfg.BaseURL)
	}
}

func TestConfig_CommandLineFlags(t *testing.T) {
	// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
	cleanup := setEnvVars(map[string]string{
		"SERVER_ADDRESS": "",
		"BASE_URL":       "",
	})
	defer cleanup()

	resetFlags()

	// üîß –≠–ú–£–õ–ò–†–£–ï–ú –ê–†–ì–£–ú–ï–ù–¢–´ –ö–û–ú–ê–ù–î–ù–û–ô –°–¢–†–û–ö–ò
	os.Args = []string{"test", "-a", "flag-host:7070", "-b", "https://flag-shortener.com"}

	cfg := Init()

	if cfg.ServerAddress != "flag-host:7070" {
		t.Errorf("Expected ServerAddress 'flag-host:7070', got '%s'", cfg.ServerAddress)
	}

	if cfg.BaseURL != "https://flag-shortener.com" {
		t.Errorf("Expected BaseURL 'https://flag-shortener.com', got '%s'", cfg.BaseURL)
	}
}

func TestConfig_EnvironmentOverridesFlags(t *testing.T) {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	cleanup := setEnvVars(map[string]string{
		"SERVER_ADDRESS": "env-host:9090", // –≠—Ç–æ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–±–µ–¥–∏—Ç—å
		"BASE_URL":       "https://env-shortener.com",
	})
	defer cleanup()

	resetFlags()

	// üîß –ü–´–¢–ê–ï–ú–°–Ø –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ò–¢–¨ –§–õ–ê–ì–ê–ú–ò (–Ω–æ env vars –¥–æ–ª–∂–Ω—ã –ø–æ–±–µ–¥–∏—Ç—å)
	os.Args = []string{"test", "-a", "flag-host:7070", "-b", "https://flag-shortener.com"}

	cfg := Init()

	// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
	if cfg.ServerAddress != "env-host:9090" {
		t.Errorf("Expected env var to override flag, got ServerAddress '%s'", cfg.ServerAddress)
	}

	if cfg.BaseURL != "https://env-shortener.com" {
		t.Errorf("Expected env var to override flag, got BaseURL '%s'", cfg.BaseURL)
	}
}

func TestConfig_DefaultValues(t *testing.T) {
	// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
	cleanup := setEnvVars(map[string]string{
		"SERVER_ADDRESS": "",
		"BASE_URL":       "",
	})
	defer cleanup()

	resetFlags()

	os.Args = []string{"test"} // –ë–µ–∑ —Ñ–ª–∞–≥–æ–≤

	cfg := Init()

	// –î–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	expectedServer := "localhost:8080"
	expectedBaseURL := "http://localhost:8080"

	if cfg.ServerAddress != expectedServer {
		t.Errorf("Expected default ServerAddress '%s', got '%s'", expectedServer, cfg.ServerAddress)
	}

	if cfg.BaseURL != expectedBaseURL {
		t.Errorf("Expected default BaseURL '%s', got '%s'", expectedBaseURL, cfg.BaseURL)
	}
}

func TestConfig_Validate(t *testing.T) {
	tests := []struct {
		name        string
		serverAddr  string
		baseURL     string
		shouldError bool
	}{
		{
			name:        "valid config",
			serverAddr:  "localhost:8080",
			baseURL:     "http://example.com",
			shouldError: false,
		},
		{
			name:        "empty server address",
			serverAddr:  "",
			baseURL:     "http://example.com",
			shouldError: true,
		},
		{
			name:        "empty base URL",
			serverAddr:  "localhost:8080",
			baseURL:     "",
			shouldError: true,
		},
		{
			name:        "both empty",
			serverAddr:  "",
			baseURL:     "",
			shouldError: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := &Config{
				ServerAddress: tt.serverAddr,
				BaseURL:       tt.baseURL,
			}

			err := cfg.Validate()

			if tt.shouldError && err == nil {
				t.Errorf("Expected error, but got none")
			}

			if !tt.shouldError && err != nil {
				t.Errorf("Expected no error, but got: %v", err)
			}
		})
	}
}
